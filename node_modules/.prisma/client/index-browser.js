
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.28.0
 * Query Engine version: c838e79f39885bc8e1611849b1eb28b5bb5bc922
 */
Prisma.prismaVersion = {
  client: "2.28.0",
  engine: "c838e79f39885bc8e1611849b1eb28b5bb5bc922"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ClientScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Address: 'Address',
  City: 'City',
  PhoneNumber: 'PhoneNumber',
  TaxIdentificationNumber: 'TaxIdentificationNumber',
  IsDelete: 'IsDelete',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.ClientContactScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Position: 'Position',
  PhoneNumber: 'PhoneNumber',
  Email: 'Email',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate',
  ClientId: 'ClientId'
});

exports.Prisma.CodeProjectScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  ClientId: 'ClientId',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate',
  ConfirmedDate: 'ConfirmedDate',
  ConfirmedBy: 'ConfirmedBy',
  Address: 'Address',
  DocumentName: 'DocumentName',
  IsCompleted: 'IsCompleted',
  CompletedDate: 'CompletedDate',
  CompletedBy: 'CompletedBy',
  IsDelete: 'IsDelete'
});

exports.Prisma.CodeProjectDocumentScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Url: 'Url',
  CodeProjectId: 'CodeProjectId',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.CodeProjectUserScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  CodeProjectId: 'CodeProjectId'
});

exports.Prisma.CodeReportScalarFieldEnum = makeEnum({
  Id: 'Id',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate',
  Date: 'Date',
  CodeProjectId: 'CodeProjectId',
  Type: 'Type',
  IsDelete: 'IsDelete',
  Note: 'Note'
});

exports.Prisma.CodeReportApprovalScalarFieldEnum = makeEnum({
  Id: 'Id',
  CodeReportId: 'CodeReportId',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate',
  Comment: 'Comment',
  Approval: 'Approval',
  IsDelete: 'IsDelete'
});

exports.Prisma.DailyReportImageScalarFieldEnum = makeEnum({
  Id: 'Id',
  CodeReportId: 'CodeReportId',
  ImageUrl: 'ImageUrl',
  Name: 'Name',
  Caption: 'Caption'
});

exports.Prisma.DailyTaskScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  Unit: 'Unit',
  Quantity: 'Quantity',
  ParentId: 'ParentId',
  CodeReportId: 'CodeReportId',
  Note: 'Note'
});

exports.Prisma.MaterialScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Quantity: 'Quantity',
  Status: 'Status',
  Description: 'Description',
  Unit: 'Unit',
  CodeReportId: 'CodeReportId'
});

exports.Prisma.ProjectScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  BudgetPrice: 'BudgetPrice',
  Quantity: 'Quantity',
  Done: 'Done',
  IsDelete: 'IsDelete',
  CodeProjectId: 'CodeProjectId',
  ParentId: 'ParentId',
  EstimatedDuration: 'EstimatedDuration',
  Timeline: 'Timeline',
  Price: 'Price',
  Description: 'Description',
  Unit: 'Unit'
});

exports.Prisma.ProjectTaskScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  ParentId: 'ParentId',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.RequestForInformationScalarFieldEnum = makeEnum({
  Id: 'Id',
  CodeReportId: 'CodeReportId',
  Description: 'Description',
  Header: 'Header',
  AddressedFor: 'AddressedFor',
  IsDelete: 'IsDelete'
});

exports.Prisma.RequestForInformationAnswerScalarFieldEnum = makeEnum({
  Id: 'Id',
  Answer: 'Answer',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate',
  RequestForInformationId: 'RequestForInformationId',
  IsDelete: 'IsDelete'
});

exports.Prisma.RequestForInformationDocumentScalarFieldEnum = makeEnum({
  Id: 'Id',
  RequestForInformationId: 'RequestForInformationId',
  ImageUrl: 'ImageUrl',
  Name: 'Name'
});

exports.Prisma.StatusReportScalarFieldEnum = makeEnum({
  Id: 'Id',
  Status: 'Status',
  CodeReportId: 'CodeReportId'
});

exports.Prisma.StatusReportImageScalarFieldEnum = makeEnum({
  Id: 'Id',
  StatusReportId: 'StatusReportId',
  ImageUrl: 'ImageUrl',
  Name: 'Name'
});

exports.Prisma.ToolScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  Quantity: 'Quantity',
  CodeReportId: 'CodeReportId'
});

exports.Prisma.WeatherScalarFieldEnum = makeEnum({
  Id: 'Id',
  WeatherId: 'WeatherId',
  CodeReportId: 'CodeReportId'
});

exports.Prisma.WorkerScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  CodeReportId: 'CodeReportId',
  Quantity: 'Quantity'
});

exports.Prisma.UserContactScalarFieldEnum = makeEnum({
  Id: 'Id',
  PhoneNumber: 'PhoneNumber',
  UserId: 'UserId',
  WhatsappAvailable: 'WhatsappAvailable'
});

exports.Prisma.UserPositionScalarFieldEnum = makeEnum({
  Id: 'Id',
  Position: 'Position',
  EffectiveDate: 'EffectiveDate',
  CreatedBy: 'CreatedBy',
  CreatedDate: 'CreatedDate',
  UserId: 'UserId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  Id: 'Id',
  Email: 'Email',
  FirstName: 'FirstName',
  LastName: 'LastName',
  IsActive: 'IsActive',
  Password: 'Password',
  ImageUrl: 'ImageUrl',
  ThumbnailUrl: 'ThumbnailUrl'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  client: 'client',
  clientContact: 'clientContact',
  codeProject: 'codeProject',
  codeProjectDocument: 'codeProjectDocument',
  codeProjectUser: 'codeProjectUser',
  codeReport: 'codeReport',
  codeReportApproval: 'codeReportApproval',
  dailyReportImage: 'dailyReportImage',
  dailyTask: 'dailyTask',
  material: 'material',
  project: 'project',
  projectTask: 'projectTask',
  requestForInformation: 'requestForInformation',
  requestForInformationAnswer: 'requestForInformationAnswer',
  requestForInformationDocument: 'requestForInformationDocument',
  statusReport: 'statusReport',
  statusReportImage: 'statusReportImage',
  tool: 'tool',
  weather: 'weather',
  worker: 'worker',
  userContact: 'userContact',
  userPosition: 'userPosition',
  user: 'user'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
